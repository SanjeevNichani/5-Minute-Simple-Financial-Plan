# -*- coding: utf-8 -*-
"""smart_moneymap.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15KEomV0UoLNDfB1Tq7mi4c6M6LS56taP
"""

#This program takes 2 user inputs: CTC and % savings rate a
#This program outputs= a super-simple financial plan

#import libraries
import pandas as pd
from datetime import datetime
from IPython.display import display, HTML

# ERROR-HANDLING function for inputs
def get_float(prompt, default=None, min_value=None):
    while True:
        user_input = input(prompt)

        # Use default if input is empty and default is defined
        if default is not None and user_input.strip() == "":
            return default

        try:
            value = float(user_input)
            if min_value is not None and value <= min_value:
                print(f"Sorry — the value must be at least {min_value}. Please try again.")
                continue
            return value
        except ValueError:
            print("That doesn't look like a valid number. Please enter a numeric value (e.g. 12.5).")

#prompts to collect user inputs
ctc = get_float("Enter your CTC in Lakhs per annum (Default value = 25 LPA): ",default=25, min_value=0)

savings_rate = get_float("Enter % of your monthly salary that you are able to save (Default value = 50%): ",default=50, min_value=0)

#calcs to get monthly cash flows

monthly_take_home= 0.75*ctc*1e5/12  #assuming 25% deductions

monthly_expenses= (100-savings_rate)*1e-2*monthly_take_home

#placeholder variable for checkbox
checkbox = "⬜"

# ---- Function to style and display each table ----
def display_styled_df(df, start_idx):
    df.index = range(start_idx, start_idx + len(df))
    styles = [
        dict(selector="th", props=[("text-align", "center")]),
        dict(selector="td", props=[("text-align", "center")]),
        dict(selector="td:nth-child(1)", props=[("text-align", "left")]),
        dict(selector="table", props=[("border-collapse", "collapse"), ("width", "100%")]),
        dict(selector="th, td", props=[("border", "1px solid black"), ("padding", "8px")]),
    ]
    return df.style.set_table_styles(styles).set_properties(**{'border': '1px solid black'})

# ---- Heading ----
print("----------------------------------------------------")
print("SMART MONEY MAP — Your Super Simple Financial Plan")
print("----------------------------------------------------")
print(f"Annual CTC Entered: ₹{ctc:.2f} LPA")
print(f"Monthly Take-Home: ₹{monthly_take_home*1e-5:.2f} Lakhs (Assumption: 25% deductions for PF+Tax)")
print(f"Monthly Savings: ₹{savings_rate*1e-2*monthly_take_home*1e-3:.1f} K")


print("----------------------------------------------------")
print(" You can use the last column of each table to check off ✅ the rows where you are within the suggested range.\n")

# ---- Table 1: SAFETY FIRST ----
print("\n\033[1mFINANCIAL PLAN STAGE-1: PROTECTION\033[0m")
df1 = pd.DataFrame({
    "Category": ["Emergency Fund", "Health Insurance", "Life Insurance"],
    "Thumb Rule": ["3–6× Monthly Expenses", "₹5L – ₹10L", "10–15× Annual CTC"],
    "Min Value": [f"₹{monthly_expenses*3/1e5:.1f} L", "₹5L", f"₹{ctc*10*1e-2:.2f} Cr"],
    "Max Value": [f"₹{monthly_expenses*6/1e5:.1f} L", "₹10L", f"₹{ctc*15*1e-2:.2f} Cr"],
    "Within Range✔️": [checkbox]*3
})
display(display_styled_df(df1, 1))

# ---- Table 2: SPENDING SMART ----
print("\n \033[1m FINANCIAL PLAN STAGE-2: SPENDING LIMITS\033[0m")
df2 = pd.DataFrame({
    "Category": ["Car Budget", "Home Purchase Price","All EMIs Combined"],
    "Thumb Rule": ["≤ 60% of CTC","3–5× Annual CTC","≤ 45% of Monthly Take Home"],
    "Min Value": ["----",f"₹{ctc*3*1e-2:.2f} Cr","----"],
    "Max Value": [f"₹{ctc*0.6:.2f} L",f"₹{ctc*5*1e-2:.2f} Cr",f"₹{monthly_take_home*0.45*1e-3:.1f} K"],
    "Within Range✔️": [checkbox]*3
})
display(display_styled_df(df2, 4))

# ---- Table 3: WEALTH BUILDING ----
print("\n \033[1m FINANCIAL PLAN STAGE-3: WEALTH BUILDING\033[0m")
df3 = pd.DataFrame({
    "Category": ["Monthly SIP", "Retirement Corpus"],
    "Thumb Rule": ["20–30% of CTC", "10–15× Annual CTC"],
    "Min Value": [f"₹{ctc*0.20*1e2/12:.0f} K", f"₹{ctc*10*1e-2:.2f} Cr"],
    "Max Value": [f"₹{ctc*0.30*1e2/12:.0f} K", f"₹{ctc*15*1e-2:.2f} Cr"],
    "Within Range✔️": [checkbox]*2
})
display(display_styled_df(df3, 7))

# ---- Notes ----
print("\n Notes & Assumptions")
print("1. CTC is gross annual income in LPA.")
print("2. Approx 25% of CTC is assumed for tax + PF deductions.")
print("3. These are thumb-rule suggestions, NOT personalized financial advice.")
print("4. All values rounded to nearest ₹K, ₹L or ₹Cr as needed.")

# ---- Footer ----
print("\n")
print(" You are encouraged to save a printout of this snapshot for your future reference.")
today = datetime.now().strftime("%d-%b-%Y")
print(f"\n📅 Snapshot Date: {today}")
print("Your Initials: ______________________________")